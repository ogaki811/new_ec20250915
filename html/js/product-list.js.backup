// Product List Page JavaScript

document.addEventListener('DOMContentLoaded', function() {
    
    // Initialize all product list functionality
    initFilterToggle();
    initPriceRange();
    initFilters();
    initViewToggle();
    initSorting();
    initPagination();
    initAddToCart();
    initFavorites();
    initQuickView();
    initSearchFunctionality();
    
    // Product data simulation
    let currentFilters = {
        price: { min: 0, max: 50000 },
        categories: [],
        brands: [],
        sizes: [],
        colors: [],
        ratings: [],
        tags: []
    };
    
    let sortOption = 'relevance';
    let currentPage = 1;
    let itemsPerPage = 12;
    let viewMode = 'grid'; // 'grid' or 'list'
    
    // Initialize Filter Toggle
    function initFilterToggle() {
        const filterTitles = document.querySelectorAll('.filter-title');
        
        filterTitles.forEach(title => {
            title.addEventListener('click', function() {
                const filterSection = this.parentElement;
                filterSection.classList.toggle('collapsed');
                
                // Store collapse state in localStorage
                const sectionId = filterSection.getAttribute('data-filter');
                if (sectionId) {
                    const isCollapsed = filterSection.classList.contains('collapsed');
                    localStorage.setItem(`filter_${sectionId}_collapsed`, isCollapsed);
                }
            });
            
            // Restore collapse state from localStorage
            const filterSection = title.parentElement;
            const sectionId = filterSection.getAttribute('data-filter');
            if (sectionId) {
                const isCollapsed = localStorage.getItem(`filter_${sectionId}_collapsed`) === 'true';
                if (isCollapsed) {
                    filterSection.classList.add('collapsed');
                }
            }
        });
    }
    
    // Initialize Price Range Slider
    function initPriceRange() {
        const minInput = document.getElementById('priceMin');
        const maxInput = document.getElementById('priceMax');
        const slider = document.querySelector('.price-slider');
        const track = document.querySelector('.price-track');
        const thumbs = document.querySelectorAll('.price-thumb');
        
        if (!minInput || !maxInput || !slider) return;
        
        const minPrice = 0;
        const maxPrice = 50000;
        let isDragging = false;
        let dragThumb = null;
        
        function updateSlider() {
            const min = parseInt(minInput.value) || minPrice;
            const max = parseInt(maxInput.value) || maxPrice;
            
            const minPercent = ((min - minPrice) / (maxPrice - minPrice)) * 100;
            const maxPercent = ((max - minPrice) / (maxPrice - minPrice)) * 100;
            
            track.style.left = minPercent + '%';
            track.style.width = (maxPercent - minPercent) + '%';
            
            if (thumbs[0]) thumbs[0].style.left = minPercent + '%';
            if (thumbs[1]) thumbs[1].style.left = maxPercent + '%';
            
            // Update filters
            currentFilters.price.min = min;
            currentFilters.price.max = max;
        }
        
        function handleMouseDown(e, thumbIndex) {
            isDragging = true;
            dragThumb = thumbIndex;
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
            e.preventDefault();
        }
        
        function handleMouseMove(e) {
            if (!isDragging || dragThumb === null) return;
            
            const rect = slider.getBoundingClientRect();
            const percent = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));
            const value = Math.round(minPrice + (percent / 100) * (maxPrice - minPrice));
            
            if (dragThumb === 0) {
                const maxVal = parseInt(maxInput.value) || maxPrice;
                if (value < maxVal) {
                    minInput.value = value;
                }
            } else {
                const minVal = parseInt(minInput.value) || minPrice;
                if (value > minVal) {
                    maxInput.value = value;
                }
            }
            
            updateSlider();
        }
        
        function handleMouseUp() {
            isDragging = false;
            dragThumb = null;
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
            applyFilters();
        }
        
        // Event listeners
        minInput.addEventListener('input', updateSlider);
        maxInput.addEventListener('input', updateSlider);
        
        if (thumbs[0]) thumbs[0].addEventListener('mousedown', (e) => handleMouseDown(e, 0));
        if (thumbs[1]) thumbs[1].addEventListener('mousedown', (e) => handleMouseDown(e, 1));
        
        // Initialize slider
        updateSlider();
    }
    
    // Initialize Filters
    function initFilters() {
        const filterCheckboxes = document.querySelectorAll('.filter-option input[type=\"checkbox\"]');
        const clearFiltersBtn = document.querySelector('.clear-filters');
        
        filterCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const filterType = this.getAttribute('data-filter-type');
                const filterValue = this.value;
                
                if (!currentFilters[filterType]) {
                    currentFilters[filterType] = [];
                }
                
                if (this.checked) {
                    if (!currentFilters[filterType].includes(filterValue)) {
                        currentFilters[filterType].push(filterValue);
                    }
                } else {
                    currentFilters[filterType] = currentFilters[filterType].filter(
                        value => value !== filterValue
                    );
                }
                
                applyFilters();
                updateActiveFilters();
            });
        });
        
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', function() {
                clearAllFilters();
            });
        }
    }
    
    // Initialize View Toggle
    function initViewToggle() {
        const viewBtns = document.querySelectorAll('.view-btn');
        const productsGrid = document.querySelector('.products-grid');
        
        viewBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const view = this.getAttribute('data-view');
                
                // Update active state
                viewBtns.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Update grid class
                if (productsGrid) {
                    productsGrid.classList.toggle('list-view', view === 'list');
                }
                
                viewMode = view;
                localStorage.setItem('product_view_mode', view);
            });
        });
        
        // Restore view mode from localStorage
        const savedViewMode = localStorage.getItem('product_view_mode');
        if (savedViewMode) {
            const targetBtn = document.querySelector(`[data-view=\"${savedViewMode}\"]`);
            if (targetBtn) {
                targetBtn.click();
            }
        }
    }
    
    // Initialize Sorting
    function initSorting() {
        const sortSelect = document.getElementById('sortSelect');
        
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                sortOption = this.value;
                applySorting();
            });
        }
    }
    
    // Initialize Pagination
    function initPagination() {
        const paginationBtns = document.querySelectorAll('.pagination-btn');
        const pageLinks = document.querySelectorAll('.pagination-page');
        
        paginationBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const action = this.getAttribute('data-action');
                
                if (action === 'prev' && currentPage > 1) {
                    currentPage--;
                } else if (action === 'next') {
                    currentPage++;
                }
                
                updatePagination();
                scrollToTop();
            });
        });
        
        pageLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const page = parseInt(this.getAttribute('data-page'));
                if (page && page !== currentPage) {
                    currentPage = page;
                    updatePagination();
                    scrollToTop();
                }
            });
        });
    }
    
    // Initialize Add to Cart
    function initAddToCart() {
        const addToCartBtns = document.querySelectorAll('.add-to-cart');
        
        addToCartBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const productCard = this.closest('.product-card');
                const productId = productCard.getAttribute('data-product-id');
                const productTitle = productCard.querySelector('.product-title').textContent;
                
                // Show loading state                const originalText = this.innerHTML;                this.innerHTML = `                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"animate-spin\">                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>                        <path d=\"M8 12l2 2 4-4\"></path>                    </svg>                    追加中...                `;                this.disabled = true;                                // Simulate API call                setTimeout(() => {                    // Show success state                    this.innerHTML = `                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">                            <path d=\"M20 6L9 17l-5-5\"></path>                        </svg>                        追加完了！                    `;                    this.style.background = '#28a745';                                        // Update cart badge                    updateCartBadge(1);                                        // Show notification                    if (window.ECUtils) {                        window.ECUtils.showNotification(`${productTitle}をカートに追加しました`, 'success');                    }                                        // Reset button after delay                    setTimeout(() => {                        this.innerHTML = originalText;                        this.disabled = false;                        this.style.background = '';                    }, 2000);                }, 1000);            });        });    }        // Initialize Favorites    function initFavorites() {        const favoriteBtns = document.querySelectorAll('.favorite-btn');                favoriteBtns.forEach(btn => {            btn.addEventListener('click', function() {                const productCard = this.closest('.product-card');                const productId = productCard.getAttribute('data-product-id');                const productTitle = productCard.querySelector('.product-title').textContent;                                const isActive = this.classList.contains('active');                                if (isActive) {                    // Remove from favorites                    this.classList.remove('active');                                        if (window.ECUtils) {                        window.ECUtils.showNotification(`${productTitle}をお気に入りから削除しました`, 'info');                    }                } else {                    // Add to favorites                    this.classList.add('active');                                        // Update favorites badge                    updateFavoritesBadge(1);                                        if (window.ECUtils) {                        window.ECUtils.showNotification(`${productTitle}をお気に入りに追加しました`, 'success');                    }                }            });        });    }        // Initialize Quick View    function initQuickView() {        const quickViewBtns = document.querySelectorAll('.quick-view');                quickViewBtns.forEach(btn => {            btn.addEventListener('click', function() {                const productCard = this.closest('.product-card');                const productId = productCard.getAttribute('data-product-id');                                openQuickView(productId);            });        });    }        // Initialize Search Functionality    function initSearchFunctionality() {        const searchInput = document.querySelector('.search-input');                if (searchInput) {            let searchTimeout;                        searchInput.addEventListener('input', function() {                clearTimeout(searchTimeout);                const query = this.value.trim();                                searchTimeout = setTimeout(() => {                    if (query.length >= 2) {                        performSearch(query);                    } else if (query.length === 0) {                        clearSearch();                    }                }, 300);            });        }    }        // Apply Filters Function    function applyFilters() {        showLoadingState();                // Simulate API call        setTimeout(() => {            // Filter logic would go here            // For demo purposes, we'll just update the UI            updateProductGrid();            updateResultsCount();            hideLoadingState();        }, 500);    }        // Apply Sorting Function    function applySorting() {        showLoadingState();                // Simulate API call        setTimeout(() => {            // Sort logic would go here            updateProductGrid();            hideLoadingState();        }, 300);    }        // Clear All Filters    function clearAllFilters() {        // Reset all filter checkboxes        const filterCheckboxes = document.querySelectorAll('.filter-option input[type=\"checkbox\"]');        filterCheckboxes.forEach(checkbox => {            checkbox.checked = false;        });                // Reset price range        const minInput = document.getElementById('priceMin');        const maxInput = document.getElementById('priceMax');        if (minInput) minInput.value = 0;        if (maxInput) maxInput.value = 50000;                // Reset filter state        currentFilters = {            price: { min: 0, max: 50000 },            categories: [],            brands: [],            sizes: [],            colors: [],            ratings: [],            tags: []        };                // Update UI        updateActiveFilters();        applyFilters();    }        // Update Active Filters Display    function updateActiveFilters() {        const activeFiltersContainer = document.querySelector('.active-filters');        if (!activeFiltersContainer) return;                activeFiltersContainer.innerHTML = '';                // Add price filter if not default        if (currentFilters.price.min > 0 || currentFilters.price.max < 50000) {            addFilterTag(`価格: ¥${currentFilters.price.min.toLocaleString()} - ¥${currentFilters.price.max.toLocaleString()}`, 'price');        }                // Add other filters        Object.keys(currentFilters).forEach(filterType => {            if (filterType === 'price') return;                        const filterValues = currentFilters[filterType];            if (Array.isArray(filterValues) && filterValues.length > 0) {                filterValues.forEach(value => {                    addFilterTag(`${getFilterTypeLabel(filterType)}: ${value}`, filterType, value);                });            }        });                function addFilterTag(label, filterType, filterValue = null) {            const tag = document.createElement('div');            tag.className = 'filter-tag';            tag.innerHTML = `                <span>${label}</span>                <button class=\"remove-filter\" data-filter-type=\"${filterType}\" data-filter-value=\"${filterValue || ''}\">                    ×                </button>            `;                        // Add remove functionality            const removeBtn = tag.querySelector('.remove-filter');            removeBtn.addEventListener('click', function() {                removeFilter(filterType, filterValue);            });                        activeFiltersContainer.appendChild(tag);        }    }        // Remove Filter    function removeFilter(filterType, filterValue) {        if (filterType === 'price') {            currentFilters.price = { min: 0, max: 50000 };            const minInput = document.getElementById('priceMin');            const maxInput = document.getElementById('priceMax');            if (minInput) minInput.value = 0;            if (maxInput) maxInput.value = 50000;        } else if (filterValue) {            currentFilters[filterType] = currentFilters[filterType].filter(value => value !== filterValue);                        // Uncheck corresponding checkbox            const checkbox = document.querySelector(`input[data-filter-type=\"${filterType}\"][value=\"${filterValue}\"]`);            if (checkbox) {                checkbox.checked = false;            }        }                updateActiveFilters();        applyFilters();    }        // Get Filter Type Label    function getFilterTypeLabel(filterType) {        const labels = {            categories: 'カテゴリ',            brands: 'ブランド',            sizes: 'サイズ',            colors: '色',            ratings: '評価',            tags: 'タグ'        };        return labels[filterType] || filterType;    }        // Update Product Grid    function updateProductGrid() {        // This would typically fetch and render new products        // For demo purposes, we'll just update the results count        updateResultsCount();        updatePagination();    }        // Update Results Count    function updateResultsCount() {        const resultsCount = document.querySelector('.results-count');        if (resultsCount) {            // Simulate filtered results count            const totalResults = Math.floor(Math.random() * 500) + 100;            const startItem = (currentPage - 1) * itemsPerPage + 1;            const endItem = Math.min(currentPage * itemsPerPage, totalResults);                        resultsCount.innerHTML = `                <span class=\"highlight\">${totalResults}</span>件の商品が見つかりました                （<span class=\"highlight\">${startItem}</span>-<span class=\"highlight\">${endItem}</span>件目を表示）            `;        }    }        // Update Pagination    function updatePagination() {        const totalResults = 247; // Example total        const totalPages = Math.ceil(totalResults / itemsPerPage);                // Update pagination buttons        const prevBtn = document.querySelector('[data-action=\"prev\"]');        const nextBtn = document.querySelector('[data-action=\"next\"]');                if (prevBtn) {            prevBtn.disabled = currentPage === 1;        }                if (nextBtn) {            nextBtn.disabled = currentPage >= totalPages;        }                // Update page numbers        const pageLinks = document.querySelectorAll('.pagination-page');        pageLinks.forEach(link => {            const page = parseInt(link.getAttribute('data-page'));            link.classList.toggle('active', page === currentPage);        });                // Update pagination info        const paginationInfo = document.querySelector('.pagination-info');        if (paginationInfo) {            const startItem = (currentPage - 1) * itemsPerPage + 1;            const endItem = Math.min(currentPage * itemsPerPage, totalResults);            paginationInfo.textContent = `${startItem}-${endItem}件目 / ${totalResults}件中`;        }    }        // Scroll to Top    function scrollToTop() {        window.scrollTo({            top: 0,            behavior: 'smooth'        });    }        // Show Loading State    function showLoadingState() {        const productsContainer = document.querySelector('.products-container');        if (productsContainer) {            productsContainer.innerHTML = `                <div class=\"loading\">                    <div class=\"loading-spinner\"></div>                    <span>読み込み中...</span>                </div>            `;        }    }        // Hide Loading State    function hideLoadingState() {        const productsContainer = document.querySelector('.products-container');        if (productsContainer) {            // Restore original content            // This would typically render the actual products            productsContainer.innerHTML = `                <div class=\"products-grid\">                    <!-- Products would be rendered here -->                    <p>商品が読み込まれました</p>                </div>            `;        }    }        // Open Quick View Modal    function openQuickView(productId) {        // Create modal        const modal = document.createElement('div');        modal.className = 'quick-view-modal';        modal.innerHTML = `            <div class=\"quick-view-overlay\">                <div class=\"quick-view-content\">                    <button class=\"quick-view-close\">&times;</button>                    <div class=\"quick-view-loading\">                        <div class=\"loading-spinner\"></div>                        <p>商品情報を読み込み中...</p>                    </div>                </div>            </div>        `;                // Add styles        modal.style.cssText = `            position: fixed;            top: 0;            left: 0;            width: 100%;            height: 100%;            background: rgba(0, 0, 0, 0.8);            z-index: 10000;            display: flex;            align-items: center;            justify-content: center;            opacity: 0;            transition: opacity 0.3s;        `;                const content = modal.querySelector('.quick-view-content');        content.style.cssText = `            background: white;            border-radius: 8px;            max-width: 800px;            max-height: 90vh;            overflow-y: auto;            position: relative;            padding: 2rem;        `;                const closeBtn = modal.querySelector('.quick-view-close');        closeBtn.style.cssText = `            position: absolute;            top: 1rem;            right: 1rem;            background: none;            border: none;            font-size: 1.5rem;            cursor: pointer;            color: #666;            width: 32px;            height: 32px;            display: flex;            align-items: center;            justify-content: center;            border-radius: 50%;            transition: background-color 0.3s;        `;                document.body.appendChild(modal);        document.body.style.overflow = 'hidden';                // Fade in        setTimeout(() => {            modal.style.opacity = '1';        }, 10);                // Close functionality        function closeModal() {            modal.style.opacity = '0';            setTimeout(() => {                document.body.removeChild(modal);                document.body.style.overflow = '';            }, 300);        }                closeBtn.addEventListener('click', closeModal);        modal.addEventListener('click', function(e) {            if (e.target === modal) {                closeModal();            }        });                // Load product data (simulate)        setTimeout(() => {            const loading = modal.querySelector('.quick-view-loading');            loading.innerHTML = `                <h2>商品クイックビュー</h2>                <p>商品ID: ${productId}の詳細情報がここに表示されます。</p>                <button onclick=\"window.location.href='product-detail.html'\" style=\"                    background: var(--color-primary);                    color: white;                    border: none;                    padding: 0.75rem 1.5rem;                    border-radius: 4px;                    cursor: pointer;                    margin-top: 1rem;                \">詳細ページを見る</button>            `;        }, 1000);    }        // Perform Search    function performSearch(query) {        console.log('Searching for:', query);        showLoadingState();                // Simulate search API call        setTimeout(() => {            updateProductGrid();            hideLoadingState();        }, 800);    }        // Clear Search    function clearSearch() {        console.log('Clearing search');        updateProductGrid();    }        // Helper Functions    function updateCartBadge(increment = 1) {        const badges = document.querySelectorAll('.function-badge');        badges.forEach(badge => {            if (badge.parentElement.querySelector('.function-text')?.textContent.includes('カート')) {                let currentCount = parseInt(badge.textContent) || 0;                badge.textContent = currentCount + increment;            }        });    }        function updateFavoritesBadge(increment = 1) {        const badges = document.querySelectorAll('.function-badge');        badges.forEach(badge => {            if (badge.parentElement.querySelector('.function-text')?.textContent.includes('お気に入り')) {                let currentCount = parseInt(badge.textContent) || 0;                badge.textContent = currentCount + increment;            }        });    }        // Initialize page    updateResultsCount();    updatePagination();\n});