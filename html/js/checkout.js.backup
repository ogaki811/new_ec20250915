// Checkout Page JavaScript

document.addEventListener('DOMContentLoaded', function() {
    
    // Initialize checkout functionality
    initCustomerTypeToggle();
    initAddressSearch();
    initSameAsCustomer();
    initPaymentMethods();
    initFormValidation();
    initCardFormatting();
    initReceiptToggle();
    initFormSubmission();
    initDeliveryTimeUpdate();
    
    // Form data management
    let checkoutData = {
        customer: {
            type: 'individual',
            lastName: '田中',
            firstName: '太郎',
            lastNameKana: 'タナカ',
            firstNameKana: 'タロウ',
            email: 'tanaka@example.com',
            phone: '03-1234-5678',
            companyName: '',
            department: ''
        },
        shipping: {
            postalCode: '150-0001',
            prefecture: '東京都',
            city: '渋谷区',
            address: '神宮前1-2-3',
            building: '',
            deliveryTime: 'anytime',
            notes: ''
        },
        payment: {
            method: 'credit',
            cardNumber: '',
            expiryMonth: '',
            expiryYear: '',
            cvv: '',
            cardName: '',
            saveCard: false
        },
        billing: {
            needInvoice: false,
            needReceipt: false,
            receiptName: ''
        },
        agreement: {
            terms: false,
            newsletter: false
        }
    };
    
    // Order summary data
    let orderSummary = {
        subtotal: 1884,
        shipping: 0,
        discount: 0,
        codFee: 0,
        total: 1884
    };
    
    // Initialize customer type toggle
    function initCustomerTypeToggle() {
        const customerTypeRadios = document.querySelectorAll('input[name="customerType"]');
        const businessInfo = document.querySelector('.business-info');
        
        customerTypeRadios.forEach(radio => {
            radio.addEventListener('change', function() {
                const isBusinessSelected = this.value === 'business';
                
                if (businessInfo) {
                    if (isBusinessSelected) {
                        businessInfo.style.display = 'block';
                        setTimeout(() => {
                            businessInfo.style.opacity = '1';
                            businessInfo.style.transform = 'translateY(0)';
                        }, 10);
                    } else {
                        businessInfo.style.opacity = '0';
                        businessInfo.style.transform = 'translateY(-10px)';
                        setTimeout(() => {
                            businessInfo.style.display = 'none';
                        }, 300);
                    }
                }
                
                checkoutData.customer.type = this.value;
            });
        });
        
        // Set initial styles for business info
        if (businessInfo) {
            businessInfo.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            businessInfo.style.opacity = '0';
            businessInfo.style.transform = 'translateY(-10px)';
        }
    }
    
    // Initialize address search
    function initAddressSearch() {
        const addressSearchBtn = document.getElementById('addressSearch');
        const postalCodeInput = document.getElementById('shippingPostalCode');
        
        if (addressSearchBtn) {
            addressSearchBtn.addEventListener('click', function() {
                const postalCode = postalCodeInput.value.trim();
                
                if (!postalCode) {
                    showNotification('郵便番号を入力してください', 'warning');
                    postalCodeInput.focus();
                    return;
                }
                
                // Show loading state
                const originalText = this.innerHTML;
                this.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="animate-spin">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    検索中...
                `;
                this.disabled = true;
                
                // Simulate API call for address search
                setTimeout(() => {
                    // Mock address data based on postal code
                    const mockAddresses = {
                        '150-0001': {
                            prefecture: '東京都',
                            city: '渋谷区',
                            address: '神宮前'
                        },
                        '100-0001': {
                            prefecture: '東京都',
                            city: '千代田区',
                            address: '千代田'
                        }
                    };
                    
                    const addressData = mockAddresses[postalCode];
                    
                    if (addressData) {
                        document.getElementById('shippingPrefecture').value = addressData.prefecture;
                        document.getElementById('shippingCity').value = addressData.city;
                        document.getElementById('shippingAddress').value = addressData.address;
                        
                        showNotification('住所を自動入力しました', 'success');
                    } else {
                        showNotification('該当する住所が見つかりませんでした', 'warning');
                    }
                    
                    // Reset button
                    this.innerHTML = originalText;
                    this.disabled = false;
                }, 1000);
            });
        }
        
        // Format postal code input
        if (postalCodeInput) {
            postalCodeInput.addEventListener('input', function() {
                let value = this.value.replace(/[^0-9]/g, '');
                if (value.length > 3) {
                    value = value.slice(0, 3) + '-' + value.slice(3, 7);
                }
                this.value = value;
            });
        }
    }
    
    // Initialize same as customer toggle
    function initSameAsCustomer() {
        const sameAsCustomerCheckbox = document.getElementById('sameAsCustomer');
        const shippingInputs = [
            'shippingPostalCode',
            'shippingPrefecture',
            'shippingCity',
            'shippingAddress',
            'shippingBuilding'
        ];
        
        if (sameAsCustomerCheckbox) {
            sameAsCustomerCheckbox.addEventListener('change', function() {
                shippingInputs.forEach(inputId => {
                    const input = document.getElementById(inputId);
                    if (input) {
                        input.disabled = this.checked;
                        if (this.checked) {
                            input.style.backgroundColor = '#f8f9fa';
                            input.style.color = '#6c757d';
                        } else {
                            input.style.backgroundColor = '';
                            input.style.color = '';
                        }
                    }
                });
                
                const addressSearchBtn = document.getElementById('addressSearch');
                if (addressSearchBtn) {
                    addressSearchBtn.disabled = this.checked;
                }
            });
        }
    }        // Initialize payment methods    function initPaymentMethods() {        const paymentRadios = document.querySelectorAll('input[name=\"paymentMethod\"]');        const creditCardForm = document.getElementById('creditCardForm');        const bankTransferInfo = document.getElementById('bankTransferInfo');        const codFeeRow = document.querySelector('.cod-fee');                paymentRadios.forEach(radio => {            radio.addEventListener('change', function() {                const method = this.value;                                // Hide all payment-specific sections                if (creditCardForm) creditCardForm.style.display = 'none';                if (bankTransferInfo) bankTransferInfo.style.display = 'none';                if (codFeeRow) codFeeRow.style.display = 'none';                                // Show relevant section and update pricing                switch (method) {                    case 'credit':                        if (creditCardForm) {                            creditCardForm.style.display = 'block';                            updateRequiredFields(true);                        }                        orderSummary.codFee = 0;                        break;                    case 'bank':                        if (bankTransferInfo) bankTransferInfo.style.display = 'block';                        updateRequiredFields(false);                        orderSummary.codFee = 0;                        break;                    case 'cod':                        if (codFeeRow) codFeeRow.style.display = 'flex';                        updateRequiredFields(false);                        orderSummary.codFee = 330;                        break;                }                                checkoutData.payment.method = method;                updateOrderSummary();            });        });                function updateRequiredFields(creditCardRequired) {            const cardFields = ['cardNumber', 'expiryMonth', 'expiryYear', 'cvv', 'cardName'];            cardFields.forEach(fieldId => {                const field = document.getElementById(fieldId);                if (field) {                    field.required = creditCardRequired;                }            });        }    }        // Initialize card formatting    function initCardFormatting() {        const cardNumberInput = document.getElementById('cardNumber');        const cvvInput = document.getElementById('cvv');        const cardNameInput = document.getElementById('cardName');                // Format card number        if (cardNumberInput) {            cardNumberInput.addEventListener('input', function() {                let value = this.value.replace(/[^0-9]/g, '');                value = value.replace(/(.{4})/g, '$1 ').trim();                if (value.length > 19) value = value.slice(0, 19);                this.value = value;                                // Detect card type and show appropriate brand                detectCardType(value.replace(/\\s/g, ''));            });        }                // CVV input restriction        if (cvvInput) {            cvvInput.addEventListener('input', function() {                this.value = this.value.replace(/[^0-9]/g, '').slice(0, 4);            });        }                // Card name formatting (uppercase)        if (cardNameInput) {            cardNameInput.addEventListener('input', function() {                this.value = this.value.toUpperCase();            });        }    }        // Detect card type    function detectCardType(number) {        const cardBrands = document.querySelector('.card-brands');        if (!cardBrands) return;                // Reset all brand styles        const brandImages = cardBrands.querySelectorAll('img');        brandImages.forEach(img => {            img.style.opacity = '0.3';        });                // Simple card type detection        if (number.startsWith('4')) {            // VISA            brandImages[0].style.opacity = '1';        } else if (number.startsWith('5') || number.startsWith('2')) {            // MasterCard            brandImages[1].style.opacity = '1';        }    }        // Initialize receipt toggle    function initReceiptToggle() {        const needReceiptCheckbox = document.getElementById('needReceipt');        const receiptDetails = document.getElementById('receiptDetails');                if (needReceiptCheckbox && receiptDetails) {            needReceiptCheckbox.addEventListener('change', function() {                if (this.checked) {                    receiptDetails.style.display = 'block';                    setTimeout(() => {                        receiptDetails.style.opacity = '1';                        receiptDetails.style.transform = 'translateY(0)';                    }, 10);                } else {                    receiptDetails.style.opacity = '0';                    receiptDetails.style.transform = 'translateY(-10px)';                    setTimeout(() => {                        receiptDetails.style.display = 'none';                    }, 300);                }            });                        // Set initial styles            receiptDetails.style.transition = 'opacity 0.3s ease, transform 0.3s ease';            receiptDetails.style.opacity = '0';            receiptDetails.style.transform = 'translateY(-10px)';        }    }        // Initialize form validation    function initFormValidation() {        const form = document.getElementById('checkoutForm');        const requiredInputs = form.querySelectorAll('input[required], select[required], textarea[required]');                requiredInputs.forEach(input => {            input.addEventListener('blur', function() {                validateField(this);            });                        input.addEventListener('input', function() {                if (this.classList.contains('error')) {                    validateField(this);                }            });        });                // Email validation        const emailInput = document.getElementById('email');        if (emailInput) {            emailInput.addEventListener('blur', function() {                validateEmail(this);            });        }                // Phone validation        const phoneInput = document.getElementById('phone');        if (phoneInput) {            phoneInput.addEventListener('input', function() {                // Format phone number                let value = this.value.replace(/[^0-9-]/g, '');                this.value = value;            });        }    }        // Validate individual field    function validateField(field) {        const errorClass = 'error';        const value = field.value.trim();                // Remove existing error styling        field.classList.remove(errorClass);        removeFieldError(field);                // Check if required field is empty        if (field.required && !value) {            field.classList.add(errorClass);            showFieldError(field, 'この項目は必須です');            return false;        }                // Specific validations        if (field.type === 'email' && value) {            return validateEmail(field);        }                if (field.id === 'cardNumber' && value) {            return validateCardNumber(field);        }                if (field.id === 'cvv' && value) {            return validateCVV(field);        }                return true;    }        // Validate email    function validateEmail(field) {        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;        const value = field.value.trim();                if (value && !emailRegex.test(value)) {            field.classList.add('error');            showFieldError(field, '有効なメールアドレスを入力してください');            return false;        }                field.classList.remove('error');        removeFieldError(field);        return true;    }        // Validate card number    function validateCardNumber(field) {        const value = field.value.replace(/\\s/g, '');                if (value.length < 13 || value.length > 19) {            field.classList.add('error');            showFieldError(field, '有効なカード番号を入力してください');            return false;        }                // Luhn algorithm validation        if (!luhnCheck(value)) {            field.classList.add('error');            showFieldError(field, '無効なカード番号です');            return false;        }                field.classList.remove('error');        removeFieldError(field);        return true;    }        // Validate CVV    function validateCVV(field) {        const value = field.value.trim();                if (value.length < 3 || value.length > 4) {            field.classList.add('error');            showFieldError(field, 'CVVは3-4桁の数字です');            return false;        }                field.classList.remove('error');        removeFieldError(field);        return true;    }        // Luhn algorithm for card validation    function luhnCheck(cardNumber) {        let sum = 0;        let isEvenPosition = false;                for (let i = cardNumber.length - 1; i >= 0; i--) {            let digit = parseInt(cardNumber[i]);                        if (isEvenPosition) {                digit *= 2;                if (digit > 9) {                    digit -= 9;                }            }                        sum += digit;            isEvenPosition = !isEvenPosition;        }                return sum % 10 === 0;    }        // Show field error    function showFieldError(field, message) {        removeFieldError(field);                const errorDiv = document.createElement('div');        errorDiv.className = 'field-error';        errorDiv.textContent = message;        errorDiv.style.cssText = `            color: #dc3545;            font-size: 0.75rem;            margin-top: 0.25rem;            display: flex;            align-items: center;            gap: 0.25rem;        `;                field.parentNode.appendChild(errorDiv);    }        // Remove field error    function removeFieldError(field) {        const existingError = field.parentNode.querySelector('.field-error');        if (existingError) {            existingError.remove();        }    }        // Initialize delivery time update    function initDeliveryTimeUpdate() {        const deliveryTimeRadios = document.querySelectorAll('input[name=\"deliveryTime\"]');        const deliveryTimeDisplay = document.querySelector('.delivery-time');                deliveryTimeRadios.forEach(radio => {            radio.addEventListener('change', function() {                const timeLabels = {                    'anytime': '指定なし',                    'morning': '午前中(8:00-12:00)',                    'afternoon1': '12:00-14:00',                    'afternoon2': '14:00-16:00',                    'afternoon3': '16:00-18:00',                    'evening': '18:00-20:00'                };                                if (deliveryTimeDisplay) {                    deliveryTimeDisplay.textContent = `時間指定: ${timeLabels[this.value] || '指定なし'}`;                }            });        });    }        // Update order summary    function updateOrderSummary() {        orderSummary.total = orderSummary.subtotal + orderSummary.shipping + orderSummary.codFee - orderSummary.discount;                // Update total display        const totalElement = document.querySelector('.summary-row.total .value');        if (totalElement) {            totalElement.textContent = `¥${orderSummary.total.toLocaleString()}`;        }                // Update COD fee display        const codFeeElement = document.querySelector('.cod-fee .value');        if (codFeeElement) {            codFeeElement.textContent = `¥${orderSummary.codFee.toLocaleString()}`;        }    }        // Initialize form submission    function initFormSubmission() {        const form = document.getElementById('checkoutForm');        const placeOrderBtn = document.getElementById('placeOrderBtn');        const agreeTermsCheckbox = document.getElementById('agreeTerms');                // Enable/disable place order button based on terms agreement        if (agreeTermsCheckbox && placeOrderBtn) {            agreeTermsCheckbox.addEventListener('change', function() {                placeOrderBtn.disabled = !this.checked;            });                        // Initial state            placeOrderBtn.disabled = !agreeTermsCheckbox.checked;        }                // Form submission        if (form) {            form.addEventListener('submit', function(e) {                e.preventDefault();                                if (validateForm()) {                    processOrder();                }            });        }    }        // Validate entire form    function validateForm() {        const form = document.getElementById('checkoutForm');        const requiredInputs = form.querySelectorAll('input[required], select[required]');        let isValid = true;                requiredInputs.forEach(input => {            if (!validateField(input)) {                isValid = false;            }        });                // Check terms agreement        const agreeTerms = document.getElementById('agreeTerms');        if (agreeTerms && !agreeTerms.checked) {            showNotification('利用規約に同意してください', 'warning');            agreeTerms.focus();            isValid = false;        }                return isValid;    }        // Process order    function processOrder() {        const placeOrderBtn = document.getElementById('placeOrderBtn');                // Show loading state        const originalText = placeOrderBtn.innerHTML;        placeOrderBtn.innerHTML = `            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"animate-spin\">                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>            </svg>            注文処理中...        `;        placeOrderBtn.disabled = true;                // Collect form data        const formData = new FormData(document.getElementById('checkoutForm'));                // Simulate order processing        setTimeout(() => {            // Success - redirect to completion page            window.location.href = 'order-complete.html';        }, 3000);    }        // Show notification    function showNotification(message, type = 'info') {        const notification = document.createElement('div');        notification.className = `notification notification-${type}`;        notification.textContent = message;                notification.style.cssText = `            position: fixed;            top: 100px;            right: 20px;            background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : '#17a2b8'};            color: ${type === 'warning' ? '#212529' : 'white'};            padding: 1rem 1.5rem;            border-radius: 6px;            font-weight: 500;            z-index: 10000;            transform: translateX(100%);            transition: transform 0.3s ease;            max-width: 300px;            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);        `;                document.body.appendChild(notification);                // Animate in        setTimeout(() => {            notification.style.transform = 'translateX(0)';        }, 100);                // Auto remove        setTimeout(() => {            notification.style.transform = 'translateX(100%)';            setTimeout(() => {                if (notification.parentNode) {                    notification.parentNode.removeChild(notification);                }            }, 300);        }, 4000);    }        // Add CSS for error states and animations    const style = document.createElement('style');    style.textContent = `        @keyframes spin {            from { transform: rotate(0deg); }            to { transform: rotate(360deg); }        }                .form-input.error,        .form-select.error {            border-color: #dc3545 !important;            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25) !important;        }                .payment-option:hover {            transform: translateY(-1px);            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);        }                .delivery-time-option:hover {            transform: translateY(-1px);        }                .btn-place-order:active {            transform: translateY(0);        }    `;    document.head.appendChild(style);\n});